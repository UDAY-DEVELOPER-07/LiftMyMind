import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/vanta/dist/vanta.trunk.min.js
var require_vanta_trunk_min = __commonJS({
  "node_modules/vanta/dist/vanta.trunk.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports._vantaEffect = t() : e._vantaEffect = t();
    }("undefined" != typeof self ? self : exports, () => (() => {
      "use strict";
      var e = { d: (t2, i2) => {
        for (var s2 in i2) e.o(i2, s2) && !e.o(t2, s2) && Object.defineProperty(t2, s2, { enumerable: true, get: i2[s2] });
      }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      } }, t = {};
      function i() {
        return "undefined" != typeof navigator ? /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 600 : null;
      }
      e.r(t), e.d(t, { default: () => m }), Number.prototype.clamp = function(e2, t2) {
        return Math.min(Math.max(this, e2), t2);
      };
      const s = (e2) => "number" == typeof e2 ? "#" + ("00000" + e2.toString(16)).slice(-6) : e2;
      function o(e2) {
        for (; e2.children && e2.children.length > 0; ) o(e2.children[0]), e2.remove(e2.children[0]);
        e2.geometry && e2.geometry.dispose(), e2.material && (Object.keys(e2.material).forEach((t2) => {
          e2.material[t2] && null !== e2.material[t2] && "function" == typeof e2.material[t2].dispose && e2.material[t2].dispose();
        }), e2.material.dispose());
      }
      const n = "object" == typeof window;
      let r = n && window.THREE || {};
      n && !window.VANTA && (window.VANTA = {});
      const h = n && window.VANTA || {};
      h.register = (e2, t2) => h[e2] = (e3) => new t2(e3), h.version = "0.5.24";
      const a = function() {
        return Array.prototype.unshift.call(arguments, "[VANTA]"), console.error.apply(this, arguments);
      };
      h.VantaBase = class {
        constructor(e2 = {}) {
          if (!n) return false;
          h.current = this, this.windowMouseMoveWrapper = this.windowMouseMoveWrapper.bind(this), this.windowTouchWrapper = this.windowTouchWrapper.bind(this), this.windowGyroWrapper = this.windowGyroWrapper.bind(this), this.resize = this.resize.bind(this), this.animationLoop = this.animationLoop.bind(this), this.restart = this.restart.bind(this);
          const t2 = "function" == typeof this.getDefaultOptions ? this.getDefaultOptions() : this.defaultOptions;
          if (this.options = Object.assign({ mouseControls: true, touchControls: true, gyroControls: false, minHeight: 200, minWidth: 200, scale: 1, scaleMobile: 1 }, t2), (e2 instanceof HTMLElement || "string" == typeof e2) && (e2 = { el: e2 }), Object.assign(this.options, e2), this.options.THREE && (r = this.options.THREE), this.el = this.options.el, null == this.el) a('Instance needs "el" param!');
          else if (!(this.options.el instanceof HTMLElement)) {
            const e3 = this.el;
            if (this.el = (i2 = e3, document.querySelector(i2)), !this.el) return void a("Cannot find element", e3);
          }
          var i2;
          this.prepareEl(), this.initThree(), this.setSize();
          try {
            this.init();
          } catch (e3) {
            return a("Init error", e3), this.renderer && this.renderer.domElement && this.el.removeChild(this.renderer.domElement), void (this.options.backgroundColor && (console.log("[VANTA] Falling back to backgroundColor"), this.el.style.background = s(this.options.backgroundColor)));
          }
          this.initMouse(), this.resize(), this.animationLoop();
          const o2 = window.addEventListener;
          o2("resize", this.resize), window.requestAnimationFrame(this.resize), this.options.mouseControls && (o2("scroll", this.windowMouseMoveWrapper), o2("mousemove", this.windowMouseMoveWrapper)), this.options.touchControls && (o2("touchstart", this.windowTouchWrapper), o2("touchmove", this.windowTouchWrapper)), this.options.gyroControls && o2("deviceorientation", this.windowGyroWrapper);
        }
        setOptions(e2 = {}) {
          Object.assign(this.options, e2), this.triggerMouseMove();
        }
        prepareEl() {
          let e2, t2;
          if ("undefined" != typeof Node && Node.TEXT_NODE) for (e2 = 0; e2 < this.el.childNodes.length; e2++) {
            const t3 = this.el.childNodes[e2];
            if (t3.nodeType === Node.TEXT_NODE) {
              const e3 = document.createElement("span");
              e3.textContent = t3.textContent, t3.parentElement.insertBefore(e3, t3), t3.remove();
            }
          }
          for (e2 = 0; e2 < this.el.children.length; e2++) t2 = this.el.children[e2], "static" === getComputedStyle(t2).position && (t2.style.position = "relative"), "auto" === getComputedStyle(t2).zIndex && (t2.style.zIndex = 1);
          "static" === getComputedStyle(this.el).position && (this.el.style.position = "relative");
        }
        applyCanvasStyles(e2, t2 = {}) {
          Object.assign(e2.style, { position: "absolute", zIndex: 0, top: 0, left: 0, background: "" }), Object.assign(e2.style, t2), e2.classList.add("vanta-canvas");
        }
        initThree() {
          r.WebGLRenderer ? (this.renderer = new r.WebGLRenderer({ alpha: true, antialias: true }), this.el.appendChild(this.renderer.domElement), this.applyCanvasStyles(this.renderer.domElement), isNaN(this.options.backgroundAlpha) && (this.options.backgroundAlpha = 1), this.scene = new r.Scene()) : console.warn("[VANTA] No THREE defined on window");
        }
        getCanvasElement() {
          return this.renderer ? this.renderer.domElement : this.p5renderer ? this.p5renderer.canvas : void 0;
        }
        getCanvasRect() {
          const e2 = this.getCanvasElement();
          return !!e2 && e2.getBoundingClientRect();
        }
        windowMouseMoveWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          const i2 = e2.clientX - t2.left, s2 = e2.clientY - t2.top;
          i2 >= 0 && s2 >= 0 && i2 <= t2.width && s2 <= t2.height && (this.mouseX = i2, this.mouseY = s2, this.options.mouseEase || this.triggerMouseMove(i2, s2));
        }
        windowTouchWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          if (1 === e2.touches.length) {
            const i2 = e2.touches[0].clientX - t2.left, s2 = e2.touches[0].clientY - t2.top;
            i2 >= 0 && s2 >= 0 && i2 <= t2.width && s2 <= t2.height && (this.mouseX = i2, this.mouseY = s2, this.options.mouseEase || this.triggerMouseMove(i2, s2));
          }
        }
        windowGyroWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          const i2 = Math.round(2 * e2.alpha) - t2.left, s2 = Math.round(2 * e2.beta) - t2.top;
          i2 >= 0 && s2 >= 0 && i2 <= t2.width && s2 <= t2.height && (this.mouseX = i2, this.mouseY = s2, this.options.mouseEase || this.triggerMouseMove(i2, s2));
        }
        triggerMouseMove(e2, t2) {
          void 0 === e2 && void 0 === t2 && (this.options.mouseEase ? (e2 = this.mouseEaseX, t2 = this.mouseEaseY) : (e2 = this.mouseX, t2 = this.mouseY)), this.uniforms && (this.uniforms.iMouse.value.x = e2 / this.scale, this.uniforms.iMouse.value.y = t2 / this.scale);
          const i2 = e2 / this.width, s2 = t2 / this.height;
          "function" == typeof this.onMouseMove && this.onMouseMove(i2, s2);
        }
        setSize() {
          this.scale || (this.scale = 1), i() && this.options.scaleMobile ? this.scale = this.options.scaleMobile : this.options.scale && (this.scale = this.options.scale), this.width = Math.max(this.el.offsetWidth, this.options.minWidth), this.height = Math.max(this.el.offsetHeight, this.options.minHeight);
        }
        initMouse() {
          (!this.mouseX && !this.mouseY || this.mouseX === this.options.minWidth / 2 && this.mouseY === this.options.minHeight / 2) && (this.mouseX = this.width / 2, this.mouseY = this.height / 2, this.triggerMouseMove(this.mouseX, this.mouseY));
        }
        resize() {
          this.setSize(), this.camera && (this.camera.aspect = this.width / this.height, "function" == typeof this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix()), this.renderer && (this.renderer.setSize(this.width, this.height), this.renderer.setPixelRatio(window.devicePixelRatio / this.scale)), "function" == typeof this.onResize && this.onResize();
        }
        isOnScreen() {
          const e2 = this.el.offsetHeight, t2 = this.el.getBoundingClientRect(), i2 = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop, s2 = t2.top + i2;
          return s2 - window.innerHeight <= i2 && i2 <= s2 + e2;
        }
        animationLoop() {
          this.t || (this.t = 0), this.t2 || (this.t2 = 0);
          const e2 = performance.now();
          if (this.prevNow) {
            let t2 = (e2 - this.prevNow) / (1e3 / 60);
            t2 = Math.max(0.2, Math.min(t2, 5)), this.t += t2, this.t2 += (this.options.speed || 1) * t2, this.uniforms && (this.uniforms.iTime.value = 0.016667 * this.t2);
          }
          return this.prevNow = e2, this.options.mouseEase && (this.mouseEaseX = this.mouseEaseX || this.mouseX || 0, this.mouseEaseY = this.mouseEaseY || this.mouseY || 0, Math.abs(this.mouseEaseX - this.mouseX) + Math.abs(this.mouseEaseY - this.mouseY) > 0.1 && (this.mouseEaseX += 0.05 * (this.mouseX - this.mouseEaseX), this.mouseEaseY += 0.05 * (this.mouseY - this.mouseEaseY), this.triggerMouseMove(this.mouseEaseX, this.mouseEaseY))), (this.isOnScreen() || this.options.forceAnimate) && ("function" == typeof this.onUpdate && this.onUpdate(), this.scene && this.camera && (this.renderer.render(this.scene, this.camera), this.renderer.setClearColor(this.options.backgroundColor, this.options.backgroundAlpha)), this.fps && this.fps.update && this.fps.update(), "function" == typeof this.afterRender && this.afterRender()), this.req = window.requestAnimationFrame(this.animationLoop);
        }
        restart() {
          if (this.scene) for (; this.scene.children.length; ) this.scene.remove(this.scene.children[0]);
          "function" == typeof this.onRestart && this.onRestart(), this.init();
        }
        init() {
          "function" == typeof this.onInit && this.onInit();
        }
        destroy() {
          "function" == typeof this.onDestroy && this.onDestroy();
          const e2 = window.removeEventListener;
          e2("touchstart", this.windowTouchWrapper), e2("touchmove", this.windowTouchWrapper), e2("scroll", this.windowMouseMoveWrapper), e2("mousemove", this.windowMouseMoveWrapper), e2("deviceorientation", this.windowGyroWrapper), e2("resize", this.resize), window.cancelAnimationFrame(this.req);
          const t2 = this.scene;
          t2 && t2.children && o(t2), this.renderer && (this.renderer.domElement && this.el.removeChild(this.renderer.domElement), this.renderer = null, this.scene = null), h.current === this && (h.current = null);
        }
      };
      const p = h.VantaBase;
      let c = "object" == typeof window && window.p5;
      class d extends p {
        constructor(e2) {
          c = e2.p5 || c, super(e2), this.mode = "p5";
        }
        initP5(e2) {
          const t2 = this, i2 = e2.createCanvas(t2.width, t2.height);
          i2.parent(t2.el), t2.applyCanvasStyles(e2.canvas, { background: s(t2.options.backgroundColor) }), t2.p5renderer = i2, t2.p5canvas = e2.canvas, t2.p5 = e2;
        }
        restart() {
          this.p5 && "object" == typeof this.p5 && this.p5.remove(), super.restart();
        }
        destroy() {
          this.p5 && "object" == typeof this.p5 && this.p5.remove(), super.destroy();
        }
        resize() {
          super.resize(), this.p5 && this.p5.resizeCanvas && this.p5.resizeCanvas(this.width, this.height);
        }
      }
      let l = "object" == typeof window && window.p5;
      class u extends d {
        static initClass() {
          this.prototype.p5 = true, this.prototype.defaultOptions = { color: 9979487, backgroundColor: 2237478, spacing: 0, chaos: 1 };
        }
        constructor(e2) {
          l = e2.p5 || l, super(e2);
        }
        onInit() {
          const e2 = this;
          this.p5 = new l(function(t2) {
            let o2 = i() ? 35 : 55, n2 = t2.random(1e4), r2 = t2.random(1e4), h2 = t2.random(1e4);
            function a2(e3, i2, s2) {
              let o3 = e3 % t2.TWO_PI;
              return o3 < 0 && (o3 += t2.TWO_PI), t2.noise(n2 + t2.cos(o3) * i2, r2 + t2.sin(o3) * i2, h2 + s2);
            }
            t2.setup = function() {
              e2.initP5(t2), t2.strokeWeight(1), t2.stroke(s(e2.options.color)), t2.smooth(), t2.noFill();
            }, t2.draw = function() {
              t2.clear(), t2.translate(t2.width / 2, t2.height / 2), function() {
                r2 -= 0.02, h2 += 5e-5;
                for (let i2 = 0; i2 < o2; i2++) {
                  t2.beginShape();
                  for (let s2 = 0; s2 < 360; s2++) {
                    let o3 = t2.radians(s2), n3 = 20 * e2.options.chaos * a2(o3, 0.12 * i2 + 0.2, h2) + (4 * i2 + 50) + (i2 * e2.options.spacing || 0);
                    t2.vertex(n3 * t2.cos(o3), n3 * t2.sin(o3));
                  }
                  t2.endShape(t2.CLOSE);
                }
              }();
            };
          });
        }
      }
      u.initClass();
      const m = h.register("TRUNK", u);
      return t;
    })());
  }
});
export default require_vanta_trunk_min();
//# sourceMappingURL=vanta_dist_vanta__trunk__min.js.map
